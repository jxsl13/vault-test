- name: stage 09 - configure PKI
  hosts: localhost
  gather_facts: false
  tasks:

  - name: is stage enabled
    set_fact:
      configurePKIEnabled: "{{ lookup('vars', 'configurePKI').enabled | default(True) }}"

  - name: get environment & variables
    set_fact:
      caBundleLocation: "{{ lookup('vars', 'configurePKI').caBundleLocation.replace('~', ansible_env.HOME) | default('secrets/ca.pem') }}"
      remote_env:
        KUBECONFIG: "{{ lookup('vars', 'kubeconfig').replace('~', ansible_env.HOME) }}"
        VAULT_ADDR: "{{ lookup('vars', 'vault').address | default('http://' + vault.name + '.' + vault.namespace + '.svc.cluster.local:8200') }}"
        VAULT_TOKEN: "{{ cluster_keys.root_token }}"
    when: configurePKIEnabled

  - name: enable secrets engine PKI
    hashivault_secret_engine:
      name: pki
      backend: pki
    environment: "{{ remote_env }}"
    register: pki_engine
    when: configurePKIEnabled

  - name: get PKI certificate
    hashivault_pki_cert_get:
    register: old_pki_cert
    environment: "{{ remote_env }}"
    when: configurePKIEnabled

  - name: read new PKI certificate
    set_fact:
      new_pki_cert:  "{{ lookup('file', caBundleLocation) }}"
    when: configurePKIEnabled


  # if the existing certificate is an empty dictionary or a certificate string which is the prefix of the local
  # certificate + private key bundle.
  - name: import root certificate
    hashivault_pki_ca_set:
      pem_bundle: "{{ new_pki_cert }}"
    environment: "{{ remote_env }}"
    when: configurePKIEnabled and (not 'certificate' in old_pki_cert.data) or (not new_pki_cert.startswith(old_pki_cert.data.certificate))