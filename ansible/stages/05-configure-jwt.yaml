- name: stage 05 - configure JWT auth
  hosts: localhost
  gather_facts: false
  tasks:

  - name: is stage enabled
    set_fact:
      configureJWTEnabled: "{{ lookup('vars', 'configureJWT').enabled | default(True) }}"

  - name: load keycloak credentials var from file
    include_vars:
      file: "{{ lookup('vars', 'keycloakCredentials') }}"
      name: keycloak
    when: configureJWTEnabled

  - name: get environment & variables
    set_fact:
      kubeconfig: "{{ lookup('vars', 'kubeconfig').replace('~', ansible_env.HOME) }}"
      vault: "{{ lookup('vars', 'vault') }}"
      policiesDir: "{{ lookup('vars', 'policiesDir').strip('/').replace('~', ansible_env.HOME) | default('policies') }}"

      discovery_url: "{{ keycloak.url.rstrip('/') }}/auth/realms/{{ keycloak.realm }}"
      jwks_url: "{{ keycloak.url.rstrip('/') }}/auth/realms/{{ keycloak.realm }}/protocol/openid-connect/certs"

      remote_env:
        KUBECONFIG: "{{ lookup('vars', 'kubeconfig').replace('~', ansible_env.HOME) }}"
        VAULT_ADDR: "{{ lookup('vars', 'vault').address | default('http://' + vault.name + '.' + vault.namespace + '.svc.cluster.local:8200') }}"
        VAULT_TOKEN: "{{ cluster_keys.root_token }}"
    when: configureJWTEnabled

  - name: get policy files and names
    set_fact:
      policies:
        files: "{{ lookup('fileglob', policiesDir + '/*.hcl').split(',') }}"
        names: "{{ lookup('fileglob', policiesDir + '/*.hcl').split(',') | map('basename') | map('splitext') | map('first') | list }}"
    when: configureJWTEnabled

  - name: enable JWT auth
    hashivault_auth_method:
      method_type: jwt
    environment: "{{ remote_env }}"
    when: configureJWTEnabled

  - name: configure Keycloak JWT
    hashivault_oidc_auth_method_config:
      mount_point: jwt
      default_role: reader
      bound_issuer: "{{ discovery_url }}"
      jwks_url: "{{ jwks_url }}"
    environment: "{{ remote_env }}"
    when: configureJWTEnabled

  - name: "create {{ item }} JWT role"
    hashivault_oidc_auth_role:
      name: "{{ item }}"
      mount_point: jwt
      # actual payload values below
      user_claim: sub
      bound_audiences:
        - "{{ keycloak.client_id }}"
      token_policies:
        - "{{ item }}"
      token_ttl: 3600
      groups_claim: "/resource_access/{{ keycloak.client_id }}/roles"
      bound_claims: "{{ lookup('template', 'payload/bound_claims.yaml') | from_yaml }}"
      # workaround: only needed by the ansible vault plugin, not actually needed by vault.
      # https://github.com/TerryHowe/ansible-modules-hashivault/issues/336
      allowed_redirect_uris: ""
    environment: "{{ remote_env }}"
    with_items: "{{ policies.names }}"
    when: configureJWTEnabled

  - name: create external JWT groups
    hashivault_identity_group:
      name: "external_jwt_{{ item }}"
      group_type: "external"
      metadata:
        responsibility: "{{ item }} of k/v secrets"
    environment: "{{ remote_env }}"
    with_items: "{{ policies.names }}"
    register: external_jwt_groups

  - name: "get JWT auth list"
    hashivault_auth_list:
    register: auth_list
    environment: "{{ remote_env }}"
    when: configureJWTEnabled

  - name: create JWT external group aliases
    hashivault_identity_group_alias:
      name: "{{ item.0 }}"
      mount_accessor: "{{ auth_list.backends['jwt/'].accessor }}"
      group_name: "{{ item.1.data.name }}"
    environment: "{{ remote_env }}"
    with_together:
      - "{{ policies.names }}"
      - "{{ external_jwt_groups.results }}"
    register: jwt_groups
    when: configureJWTEnabled and external_jwt_groups.changed