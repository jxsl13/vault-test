- name: Deploy Vault in Kubernetes
  hosts: localhost

  gather_facts: true

  environment:
    KUBECONFIG: "{{ lookup('vars', 'kubeconfig').replace('~', ansible_env.HOME) }}"

  tasks:
  - name: switch context to vault namespace
    shell:
      cmd: kubectl config set-context $(kubectl config current-context) --namespace vault

  - name: helm diff plugin
    kubernetes.core.helm_plugin:
      state: present
      plugin_path: https://github.com/databus23/helm-diff

  - name: add helm chart repos
    kubernetes.core.helm_repository:
      state: present
      name: hashicorp
      repo_url: https://helm.releases.hashicorp.com

  - name: load vault helm values
    include_vars:
        file: values/vault-values.yaml
        name: vault_values

  - name: deploy vault
    kubernetes.core.helm:
      state: present
      release_name: vault
      release_namespace: vault
      create_namespace: true
      chart_ref: hashicorp/vault
      # values used by the vault helm chart
      release_values: "{{ vault_values }}"

  - name: load consul helm values
    include_vars:
      file: values/consul-vault-values.yaml
      name: consul_values

  - name: deploy consul
    kubernetes.core.helm:
      state: present
      release_name: vault-db
      release_namespace: vault
      create_namespace: true
      chart_ref: hashicorp/consul
      release_values: "{{ consul_values }}"
      wait: yes

  - name: check vault status
    kubernetes.core.k8s_exec:
      namespace: vault
      pod: vault-0
      command: vault status -tls-skip-verify -format=json
    register: vault_status

  - name: set cluster status variables
    set_fact:
      cluster: "{{ vault_status.stdout | from_json }}"

#at this point we expect vault to be running as well as consul to be running,
#as consul needs more time to startup

  - name: init vault
    kubernetes.core.k8s_exec:
      namespace: vault
      pod: vault-0
      command: vault operator init -key-shares=1 -key-threshold=1 -format=json
    register: cluster_keys_result
    when: not (cluster.initialized)

  - name: set cluster keys
    set_fact:
      cluster_keys: "{{ cluster_keys_result.stdout | from_json }}"
    when: not (cluster.initialized)

  - name: write var to file
    copy:
      content: "{{ cluster_keys | to_nice_json }}"
      dest: "{{ lookup('vars','cluster_keys.json').destination.replace('~', ansible_env.HOME) }}"
    when: not (cluster.initialized)

# this file should exist in case the vault is already initialized
  - name:  load cluster_keys.json var from file
    include_vars:
      file: "{{ lookup('vars','cluster_keys.json').destination.replace('~', ansible_env.HOME) }}"
      name: cluster_keys

  - name: set facts from cluster-keys.json
    set_fact:
      unseal_keys_b64: "{{ cluster_keys.unseal_keys_b64 }}"
      root_token: "{{ cluster_keys.root_token }}"

  - name:  load keycloak credentials var from file
    include_vars:
      file: secrets/keycloak.yaml
      name: keycloak

  - name:  load manager credentials var from file
    include_vars:
      file: secrets/manager.yaml
      name: manager

  - name:  load reader credentials var from file
    include_vars:
      file: secrets/reader.yaml
      name: reader

# unseal vault in case it is sealed, we expect if vault-0 is sealed that every other vault instance is also sealed.
  - name: "unseal vault-{{ item }}"
    kubernetes.core.k8s_exec:
      namespace: vault
      pod: "vault-{{ item }}"
      command: "vault operator unseal {{ unseal_keys_b64 | join(' ') }}"
    when: cluster.sealed
    with_items: [0, 1, 2]

# unsealed vault should also be ready, in any case.
  - name: wait for vault to be READY
    kubernetes.core.k8s_info:
      api_version: apps/v1
      kind: StatefulSet
      namespace: vault
      name: vault
      wait: yes

  - name: login
    command:
      cmd: kubectl exec -i vault-{{ item }} -- vault login -no-print -
      stdin:  "{{ root_token }}"
    with_items: [0, 1, 2]

  - name:  load policy list var from file
    include_vars:
      file: policies/list.yaml
      name: policies

  - name: "apply {{ item }} policy"
    command:
      cmd: "kubectl exec -i vault-0 -- vault policy write {{ item }} -"
      stdin:  "{{ lookup('file', 'policies/' + item + '.hcl') }}"
    with_items: "{{ policies.list }}"

  - name: enable JWT
    kubernetes.core.k8s_exec:
      namespace: vault
      pod: vault-0
      command: vault auth enable jwt

  - name: include configure Keycloak JWT payload
    include_vars:
        file: payloads/jwt_configure_keycloak.yaml
        name: jwt_configure_keycloak_payload

  - name: configure Keycloak JWT
    command:
      cmd: kubectl exec -i vault-0 -- vault write auth/jwt/config -
      stdin: "{{ jwt_configure_keycloak_payload | to_json }}"

  - name: include jwt_role payload
    include_vars:
      file: payloads/jwt_role.yaml
      name: jwt_role_payload

  - name: create {{ item }} jwt role
    command:
      cmd: kubectl exec -i vault-0 -- vault write auth/jwt/role/{{ item }} -
      stdin: "{{ jwt_role_payload | to_json }}"
    with_items: "{{ policies.list }}"


  - name: enable OIDC
    kubernetes.core.k8s_exec:
      namespace: vault
      pod: vault-0
      command: vault auth enable oidc

  - name: include configure Keycloak OIDC payload
    include_vars:
        file: payloads/oidc_configure_keycloak.yaml
        name: oidc_configure_keycloak_payload

  - name: configure Keycloak OIDC
    command:
      cmd: kubectl exec -i vault-0 -- vault write auth/oidc/config -
      stdin: "{{ oidc_configure_keycloak_payload | to_json }}"



# https://terryhowe.github.io/ansible-modules-hashivault/modules/list_of_hashivault_modules.html










